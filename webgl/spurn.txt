//nota ekki isl layout, heldur dvorak thannig and eg mun ekki nota isl stafi, thu tharft ad lifa thetta af.

5%
	1. webgl:
		webgl er low level framework til ad gera animations og slikt i javascript.
	2.gpu:
		stendur fyrir graphical processing unit. notad til ad rendera hluti. hefur marga cuda kjarna sem eru ekki jafn oflugir og cpu kjarnar, en nutima gpu(t.d. nvidia 1070) hefur 1920 cuda kjarna thannig ef ad forrit getur notad tha alla getur thad verid thusund sinnum fljotara en ad nota cpu.
	3.rasterizing:
		er ad taka vector mynd og breyta henni i punkta, eda pixla.
	4.GLSL:
		shading tungumal i openGL.
	5.vertex:
		oft kallad spjot a islensku, er punktur i hnitakerfi sem bendir a annann punkt.
	6.Primative:
		eru annad hvort linur, punktar eda thrihyrningar.
	7.Fragment:
		fragment shader ser til thess ad pixli faer lit
	8.Pixel:
		er einn punktur a skja. Stutt fyrir picture element.
	9.Clip space:
		thegar thad er renderad vertex, er annad hnitakerfi, Clip space. Thad sem er fyrir utan Clip space er ekki rendarad.
	10.View	frustum:
		sjonarhorn myndavelar.
	11.Z-buffering:
		thegar thad er renderad, er geimt z axelinn. hann er fyrir haedinna, dypt.
	12.Right-hand coordinate system (RHS):
		ef madur heldur hondinni uppi med thumallinn(z) upp, visi(x) og midjuputtann(y) med 90 gradu bil a milli. oft notad i rafmagnsfraedi thegar thad kemur ad solenoidum.

0.5% Afhverju eru 3D objectar búnir	til	útfrá samsettum	þríhyrningum í 3D grafík?
	thad er notad marga polygona(oftast thrihyrningar), sem eru samsettir i "mesh", thvi fleirri poly, yfirbordsvaedid lytur ut fyrir ad vera ekki flatt.
	i odru lagi, eru gpu mjog godir i ad rendera polygona, og geta renderad millionir a sekondu.

1.5% Útskýrðu ítarlega og tæknilega	(en	án kóða) með eigin orðum ásmt skýringamyndum hvernig rendering pipeline virkar í WebGL.
	
	javascript setur hluti upp med ad setja upp webgl, bua til array, buffera objecta, compila og linka shadera, bua til attributes, bua til Transformation matrix.

	sidan Vertex shader -> Primative assembly -> Rasterization -> Pixel shader -> Frame Buffer


1.5% Transform (translation, rotation og scale). Komdu með sýnidæmi	með vector/vigri) í	cartesian hnitakerfi(x,y,z)	fyrir:

	a)	translation:
		segjum ad ved erum med vector P(x,y,z), og translated vector P`(x`,y`,z`)
		T er hversu mikid thu vilt faera vectorinn, 
		x` = x + Tx;
		y` = y + Ty;
		z` = z + Tz;

	b)	rotation:
		gerum rad fyrir ad ved aetlum ad rotate um z oxulinn. 
		α = gradur fra x(0,0) -> til p(x,y,z)
		β = gradur fra x(0,0) -> til p`(x`,y`,z`)
		x = r*cos(α);
		y = r*sin(α);
		thu getur tha fundid x` og z`
		x` = r*cos(α + β);
		y` = r*sin(α + β);
		z` = z;

	c)	scale:
		segjum ad thu vilt staekka x,y,z um Sx, Sy, Sz tha er
		x` = Sx * x;
		y` = Sy * y;
		z` = Sz * z;

1.5% Fylki (e. matrix).	Sýndu með sýnidæmi hvernig 4x4 fylki vigri/vector er reiknaður með:

	a)	translation	matrix

		var VSHADER_SOURCE =
			'attribute vec4 a_Position;\n' +
			'uniform vec4 u_Translation;\n' +
			'void main() {\n' +
			'  gl_Position = a_Position + u_Translation;\n' +
			'}\n';
		var Tx = 0.5, Ty = 0.5, Tz = 0.0;
		function main() {
			var gl = getWebGLContext(canvas);
			if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
		}
			var n = initVertexBuffers(gl);
			var u_Translation = gl.getUniformLocation(gl.program, Translation');
			gl.uniform4f(u_Translation, Tx, Ty, Tz, 0.0);
			gl.drawArrays(gl.TRIANGLES, 0, n);
		}
		function initVertexBuffers(gl) {
		   var vertices = new Float32Array([
		     0.0.0, 0.5,   -0.5, -0.5,   0.5, -0.5
		   ]);
		   var n = 3;
		   return n;
		}



	b)	rotation matrix


		var VSHADER_SOURCE =
		    // x' = x cos b - y sin b
		    // y' = x sin b + y cos b                             
		    // z' = z
		    'attribute vec4 a_Position;\n' +
		    'uniform float u_CosB, u_SinB;\n' +
		'void main() {\n' +
		   '  gl_Position.x = a_Position.x * u_CosB - a_Position.y *u_SinB;\n'+
		  '  gl_Position.y = a_Position.x * u_SinB + a_Position.y * u_CosB;\n'+
		   '  gl_Position.z = a_Position.z;\n' +
		   '  gl_Position.w = 1.0;\n' +
		   '}\n';


	    var ANGLE = 90.0;

	    function main() {
	    	var n = initVertexBuffers(gl);
	    	var radian = Math.PI * ANGLE / 180.0; // Convert to radians
	    	var cosB = Math.cos(radian);
	    	var sinB = Math.sin(radian);

	    	var u_CosB = gl.getUniformLocation(gl.program, 'u_CosB');
	    	var u_SinB = gl.getUniformLocation(gl.program, 'u_SinB');
		    gl.uniform1f(u_CosB, cosB);
		    gl.uniform1f(u_SinB, sinB);

	        gl.drawArrays(gl.TRIANGLES, 0, n);
	   }

	   function initVertexBuffers(gl) {
	      var vertices = new Float32Array([
	        0.0, 0.5,  -0.5, -0.5,  0.5, -0.5
	      ]);
	      var n = 3; 
	      return n;
	   }



	c)	scale matrix




		var VSHADER_SOURCE =
			'attribute vec4 a_Position;\n' +
			'uniform mat4 u_xformMatrix;\n' +
			'void main() {\n' +
			'  gl_Position = u_xformMatrix * a_Position;\n' +
			'}\n';
		var ANGLE = 90.0;
		function main() {
		  	var n = initVertexBuffers(gl);
			  	var radian = Math.PI * ANGLE / 180.0; // Convert to radians
			  	var cosB = Math.cos(radian), sinB = Math.sin(radian);
			  	var xformMatrix = new Float32Array([
			    	cosB, sinB, 0.0, 0.0,
			    	-sinB, cosB, 0.0, 0.0,
			    	0.0, 0.0, 1.0, 0.0,
			    	0.0, 0.0, 0.0, 1.0
		 	]);
		    var u_xformMatrix = gl.getUniformLocation(gl.program, 		formMatrix');
		    gl.uniformMatrix4fv(u_xformMatrix, false, xformMatrix);
		    gl.drawArrays(gl.TRIANGLES, 0, n);
		}
		function initVertexBuffers(gl) {
		    var vertices = new Float32Array([
		    	0.0, 0.5, -0.5, -0.5, 0.5, -0.5
		    ]);
		    var n = 3; 
		    return n;
		}


		5% fekk ekkert til ad virka i localhost, eftir ad copia linu fyrir linu, sleppi bara.
		